plot(trees$Volume~trees$Girth,xlab="Girth (inches)",ylab="Volume (cubic feet)",main="Black Cherry",
xlim=range(xvals),ylim=c(0,100))
abline(model1,lwd=2,col="green")
lines(xvals,pred[,"upr"],col="green",lty=2)
lines(xvals,pred[,"lwr"],col="green",lty=2)
text(10,80,sprintf("Volume = %s + %s*Girth",round(coefficients(model1)[1],1),round(coefficients(model1)[2],1)))
text(10,65,sprintf("p = %s",round(summary(model1)$coefficients[,"Pr(>|t|)"][2],3)))
scalar1 <- 'this is a scalar'
scalar2 <- 104
scalar3 <- 5 + 6.5    # evaluates to the single value 11.5
scalar4 <- '4'
typeof(scalar4)    # returns: character
## what is this type?
scalar5 <- TRUE
typeof(scalar5)    # returns: logical
## what happens when we run this line of code? Think about the types.
scalar_2 + scalar_4
## what happens when we run this line of code? Think about the types.
scalar2 + scalar4
vector1 <- c(1.1, 2.1, 3.1, 4)
vector2 <- c('a', 'b', 'c')
vector3 <- c(1, 'a', 2, 'b')
vector4 <- c(TRUE, 'a', 1)
vector5 <- c(TRUE, 1.2, FALSE)
typeof(vector1)
typeof(vector2)
typeof(vector3)
vector3
a <- 1
b <- 2
c <- 3
d.vec <- c(a, b, c)
d.vec
d.vec[1]
d.vec[2]
length(d.vec)    # the "length()" function returns the number of elements in a vector (or list, matrix etc.)
d1 <- d.vec           # copy the vector "d.vec"
d2 <- d.vec+3         # add 3 to all elements of the vector "d.vec"
d3 <- d1+d2           # elementwise addition
d4 <- d1+c(1,2)       # what does this do?
d4
d.mat <- cbind(d1,d2)        # create a matrix by binding vectors, with vector d1 as column 1 and d2 as column 2
d.mat
class(d.mat)   # confirm that the new object "d.mat" is a matrix!
d.mat <- matrix(c(1,2,3,4,5,6),nrow=3,ncol=2)        # create matrix another way
d.mat
d.mat <- matrix(c(1,2,3,4,5,6),nrow=3,ncol=2,byrow=T)        # create matrix another way
d.mat
d.mat + 2
d.mat/sum(d.mat)
d.mat[1,2]
d.array=array(0,dim=c(3,2,4))       # create 3 by 2 by 4 array full of zeros
d.array				# see what it looks like
d.array[1,2,3]
d.list <- list()        # create empty list
d.list[[1]] <- c(1,2,3)     # note the double brackets- this is one way to reference a specified list element.
d.list[[2]] <- c(4,5)
d.list[[3]] <- "Alfred Pennyworth"
d.list
d.list[[1]]
d.list[[1]][2]
typeof(d.list[[3]])
#############
### DATA FRAMES
#############
d.df <- data.frame(d1=c(1,2,3),d2=c(4,5,6))        # create a âdata frameâ with two columns. Each column is a vector of length 3
d.df
d.df=data.frame(d.mat)        # create data frame another way - directly from a matrix
d.df
d.df[1,1]
d.mat[1,1]
d.df[["newcol"]] <- c("a", "b", "c")
d.df
d.mat[["newcol"]] <- c("a", "b", "c")
d.df[["newcol"]] <- c("a", "b", "c")
d.df
names(d.df)          # view or change column names
names(d.df)=c("meas_1","meas_2")        # provide new names for columns
d.df
names(d.df)=c("meas_1","meas_2", "meas_3")        # provide new names for columns
d.df
rownames(d.df) <- c("obs1","obs2","obs3")
d.df
sum(1, 2, 3, 10)    # returns: 15
## sum can be used with one of the vectors we created
sum(vector1)        # returns: 10.3
help(sum)
?sum    # this is an alternative to 'help(sum)'!
1:10                        # sequence from 1 to 10
10:1                        # reverse the order
rev(1:10)                   # a different way to reverse the order
seq(from=1,to=10,by=1)      # equivalent to 1:10
seq(10,1,-1)                # equivalent to 10:1
seq(1,10,length=10)         # equivalent to 1:10
seq(0,1,length=10)          # sequence of length 10 between 0 and 1
rep(0,times=3)                # repeat 0 three times
rep(1:3,times=2)              # repeat 1:3 two times
rep(1:3,each=2)               # repeat each element of 1:3 two times
z <- rnorm(10)                # 10 realizations from std. normal
z
y <- rnorm(10,mean=-2,sd=4)           # 10 realizations from N(-2,4^2)
y
rbinom(5,size=3,prob=.5)                # 5 realizations from Binom(3,0.5)
rbinom(5,3,.1)                # 5 realizations from Binom(3,0.1)
rbinom(5,3,.8)                # 5 realizations from Binom(3,0.8)
rbinom(5,1:5,0.5)       # simulations from binomial w/ diff number of trials
rbinom(5,1:5,seq(.1,.9,length=5))   # simulations from diff number of trials and probs
runif(10)                # 10 standard uniform random variates
rpois(10, lambda=0.9)
sample(1:10,size=5,replace=TRUE)        # 5 rvs from discrete unif. on 1:10.
sample(1:10,size=5,replace=TRUE,prob=(1:10)/sum(1:10)) # 5 rvs from discrete pmf w/ varying probs.
my.data <- data.frame(
Obs.Id = 1:100,
Treatment = rep(c("A","B","C","D","E"),each=20),
Block = rep(1:20,times=5),
Germination = rpois(100,lambda=rep(c(1,5,4,7,1),each=20)),
AvgHeight = rnorm(100,mean=rep(c(10,30,31,25,35,7),each=20))
)
my.data <- data.frame(
Obs.Id = 1:100,
Treatment = rep(c("A","B","C","D","E"),each=20),
Block = rep(1:20,times=5),
Germination = rpois(100,lambda=rep(c(1,5,4,7,1),each=20)),
AvgHeight = rnorm(100,mean=rep(c(10,30,31,25,35),each=20))
)
head(my.data)
summary(my.data)    # Use the "summary()" function to summarize each column in the data frame.
my.data
names(my.data)
my.data[,"Block"]
my.data["Block"]
my.data[["Block"]]
d.df=my.data[21:30,]  # only take 10 observations
d.df
my.data$Obs.Id
d.df$AvgHeight[3]  # subset an element of a data frame
dim(d.mat)            # Obtain dimensions of matrix or array
nrow(my.data)     # get number of rows/observations in a data frame
ncol(my.data)     # get number of columns/variables in a data frame
str(my.data)      # look at the "internals" of an object (useful for making sense of complex objects!)
View(d.mat)
challenge1 <- matrix(c(1,2,3,4,5,6),nrow=3,ncol=2)
challenge1
challenge1 <- rbind(c(1,4), c(2,5), c(3,6))
challenge1
d.mat[-c(1,2),]
d.mat
class(d.mat)
d.df
d.mat2 <-d.df[c("Block","Germination","AvgHeight")]
d.mat2
d.mat3 <-matrix(c(1,2,3))
d.mat3
dim(d.mat3)
d.mat3 <-matrix(1:3)
d.mat3
dim(d.mat3)
as.vector(d.mat2)
# Find the directory you're working in
getwd()          # note: the results from running this command on my machine will probably differ from yours!
# Open finder to set directory
setwd(file.choose())
# read.table with tab delimited file (default is sep = "" (one of several common delimiters, including any type of whitespace))
data.tab.df <- read.table("data.dat", header=TRUE, sep="")
# Open finder to set directory
setwd(file.choose("C:\\Documents\R Bootcamp"))
# Open finder to set directory
setwd(file.choose("C:\\Documents\RBootcamp"))
# Open finder to set directory
setwd(file.choose("C://Documents/RBootcamp"))
setwd("~/R Bootcamp")
# read.table with tab delimited file (default is sep = "" (one of several common delimiters, including any type of whitespace))
data.tab.df <- read.table("data.dat", header=TRUE, sep="")
head(data.tab.df)    # display the first few lines of the data frame
# read.table to import textfile
data.txt.df <- read.table("data.txt", header=T, sep="")
# read.table with csv file
data.csv.df <- read.table("data.csv", header=T, sep=",")
# ?names: lists names of an object (columns, name of list elements)
names(data.csv.df)
# built-in default for importing from CSV (easiest and most widely used)
data.df <- read.csv("data.csv")
names(data.df)
# Remove objects we won't be using
rm(data.tab.df)
rm(data.txt.df)
rm(data.csv.df)
brain.df <- read.table("http://www.oup.com/us/static/companion.websites/9780195089653/Spreadsheets/brainbody.csv", header=T, sep=",")
head(brain.df)
summary(data.df)
# Built in data files
data(Titanic)
str(Titanic)    # examine the structure of this data object
# ?class: tells you what type of data object you have
class(data.df)
# ?head: displays first n elements of object (default=6)
head(data.df)
head(data.df,2)
# ?tail: displays last n elements of object (default=6)
tail(data.df)
write.table(data.df[,c("Country","Export")], file="data_export.csv", sep=",", col.names=TRUE, row.names=FALSE)   # export a subset of the data we just read in.
a <- 1
b <- data.df$Product
save(a,b,file="Module1_2.RData")
rm(a,b)   # remove these objects from the workspace
load("Module1_2.RData")   # load these objects back in!
save.image(file="Module2.RData")    # ?save.image: saves entire workspace
load(file="Module2.RData")  # load the workspace from the working directory
save.image(file="Module2.RData")    # ?save.image: saves entire workspace (we don't necessarily want to clear everything right now)
Y <- 4
Z <- 6
Y == Z  #I am asking if Y is equal to Z, and it will return FALSE
Y < Z
!(Y < Z)  # the exclamation point reverses any boolean object
# Wrong!
data.df[,2]=74     # sets entire second column equal to 74!
data.df <- read.csv("data.csv")  ## correct our mistake in the previous line and revert to the original data!
data.df
# Right
data.df[,2]==74    # tests each element of column to see whether it is equal to 74
which(data.df[,2]==74)       # elements of the data column that are equal to 74
View(data.df)
which(data.df[,2]!=74)       # elements of the data column that are NOT equal to 74
which(data.df[,2]<74)        #  and so on...
which((data.df[,2]<74)|(data.df[,2]==91))   # use the OR operator
indices <- which(data.df[,2]<74)
data.df[indices,2]               # same as above!
sub.countries<-c("Chile","Colombia","Mexico")    # create vector of character strings
data.df [data.df$Country %in% sub.countries, ]
which(data.df[,1]=="Chile")
which(data.df$Country=="Chile")
turtles.df <- read.table(file="turtle_data.txt", header=T, stringsAsFactors = FALSE)
names(turtles.df)
head(turtles.df)
View(turtles.df)
turtles.df <- read.table(file="turtle_data.txt", header=T, stringsAsFactors = FALSE)
names(turtles.df)
head(turtles.df)
# Subset for females
fem.turtles.df <- turtles.df[which(turtles.df$sex =="female"),]
# Subset for females
fem.turtles.df <- turtles.df[which(turtles.df$sex =="female")]
# Subset for females
fem.turtles.df <- turtles.df[which(turtles.df$sex =="female"),]
fem.turtles.df
# Can subset just one factor based on another
# Here we want to know the mean weight of all females
mean(fem.turtles.df$weight)
mean(turtles.df$weight[which(turtles.df$sex =="female")])
# Using subset to correct data entry problems
unique(turtles.df$sex)
table(turtles.df$sex)   # do you notice the data entry problem here?
turtles.df[which(turtles.df$sex=="fem"),2]<-"female"            # recode the sex variable
subset.turtles.df <- subset(turtles.df, weight >= 10)
head(subset.turtles.df)
# Subsetting to certain individuals
bad.tags <- c(13,105)
good.turtles.df <- turtles.df[!(turtles.df$tag_number %in% bad.tags),]
bad.turtles.df <- turtles.df[turtles.df$tag_number %in% bad.tags,]
bad.turtles.df
good.turtles.df
# Setting the length for all turtles with weight 5 or heavier to 48
turtles.df$carapace_length[which(turtles.df$weight >=5)] = 48
turtles.df
# Sets the TRUE indexes from above to 2
turtles.df$size.class[turtles.df$weight >= 6] <- 1        # make a new variable "size.class" based on the "weight" variable
turtles.df$size.class[turtles.df$weight < 6] <- 2
turtles.df$size.class
ncol(turtles.df)
# Sort works for ordering along one vector
sort(turtles.df$carapace_length)
# Order returns the indices of the original (unsorted) vector in the order that they would appear if properly sorted
order(turtles.df$carapace_length)
turtles.df[order(turtles.df$carapace_length, turtles.df$weight)]
turtles.df[order(turtles.df$carapace_length, turtles.df$weight),]
# To sort a data frame by one vector, use "order()"
turtles.tag <- turtles.df[order(turtles.df$tag_number),]
turtles.tag
# Order in reverse
turtles.tag.rev <- turtles.df[rev(order(turtles.df$tag_number)),]
turtles.tag.rev
# If you specify the header and what the text is delimited by, it will read them as NA
missing.df <- read.table(file="data_missing.txt", sep="\t", header=T)
# Try reading in a data file with missing values, w/o specifying how the text is delimited
# Will not read because of missing data, it does not know where the columns are!
missing.df <- read.table(file="data_missing.txt")
# If you specify the header and what the text is delimited by, it will read them as NA
missing.df <- read.table(file="data_missing.txt", sep="\t", header=T)
# Missing data is read as an NA
missing.df
# Omits (removes) rows with missing data
missing.NArm.df <- na.omit(missing.df)
missing.NArm.df
# ?is.na
is.na(missing.df)
# Get index of NAs
which(is.na(missing.df))
# Replace all missing values in the data frame with a 0
missing.df[is.na(missing.df)] <- 0
missing.mean.df
missing.df
# Create another data frame with missing values
missing.mean.df<- read.table(file="data_missing.txt", sep="\t", header=T)
# Replace only the missing values of just one column with the mean for that column
missing.mean.df$Export[is.na(missing.mean.df$Export)] <- mean(missing.mean.df$Export,na.rm=T)
missing.mean.df
# Access the columns
trees$Girth
trees$Volume
plot(x=trees$Girth, y=trees$Volume)    # use R's built-in "trees" dataset: ?trees
?par
# Use "layout" to define a 2 row x 2 column matrix with elements 1, 2, 3, and 4.
# This divides the image into four sections and then fills these with the plot function
layout(matrix(1:4, nrow=2, ncol=2))
plot(x=trees$Girth, y=trees$Volume)             # points
plot(x=trees$Girth, y=trees$Volume, type="l")   # lines
plot(x=trees$Girth, y=trees$Volume, type="b")   # both
plot(x=trees$Girth, y=trees$Volume, type="o")   # both with conected lines
plot(x=trees$Girth, y=trees$Volume)             ## The plot is still in 4 parts
graphics.off()                                  ## now the plot is reset!
# Use layout to define a 3 row x 1 column matrix with elements 1, 2, and 3.
# This divides the image into three sections and then fills these with the plot function
layout(matrix(1:3, nrow=3, ncol=1))
# pch: 'plotting character' changes the type of point that is used (default is an open circle)!
plot(x=trees$Girth, y=trees$Volume, pch=19)     # filled point
plot(x=trees$Girth, y=trees$Volume, pch=2)      # open triangle
plot(x=trees$Girth, y=trees$Volume, pch=11)     # star
layout(matrix(1:4, 2, 2))
# main: adds a title
plot(x=trees$Girth, y=trees$Volume, pch=19,
main="Girth vs. Volume for Black Cherry Trees")
# xlab: adds an x axis label
plot(x=trees$Girth, y=trees$Volume, pch=19,
main="Girth vs. Volume for Black Cherry Trees",
xlab="Tree Girth (in)")
# ylab: adds a y axis label
plot(x=trees$Girth, y=trees$Volume, pch=19,
main="Girth vs. Volume for Black Cherry Trees",
xlab="Tree Girth (in)", ylab="Tree Volume (cu ft)")
# las: rotates axis labels; las=1 makes them all parallel to reading direction
plot(x=trees$Girth, y=trees$Volume, pch=19,
main="Girth vs. Volume for Black Cherry Trees",
xlab="Tree Girth (in)", ylab="Tree Volume (cu ft)",
las=1)
# Use layout to define a 2 row x 2 column matrix with elements 1, 1, 2, and 3.
# This divides the image into four sections but fills the first two sections
# with the first plot and then fills these next two sections with the final two plots
layout(matrix(c(1, 1, 2, 3), nrow=2, ncol=2))
# col: select a color for the plotting characters
plot(x=trees$Girth, y=trees$Volume, pch=19,
main="Girth vs. Volume for Black Cherry Trees",
xlab="Tree Girth (in)", ylab="Tree Volume (cu ft)",
las=1, col="blue")
# We can use the c() function to make a vector and have several colors, plotting characters, etc. per plot.
# We start with alternating colors for each point
plot(x=trees$Girth, y=trees$Volume, pch=19,
main="Girth vs. Volume for Black Cherry Trees",
xlab="Tree Girth (in)", ylab="Tree Volume (cu ft)",
las=1, col=c("black", "blue"))
# And we can also alternate the plotting symbol at each point.
plot(x=trees$Girth, y=trees$Volume, pch=c(1,19),
main="Girth vs. Volume for Black Cherry Trees",
xlab="Tree Girth (in)", ylab="Tree Volume (cu ft)",
las=1, col="blue")
?iris
head(iris)     # display first few rows of data
dim(iris)      # dimensionality of the data
str(iris)      # details of the data structure
plot.colors <- c("violet", "purple", "blue")   # define the colors for representing species ID
color.vector <- rep(x=plot.colors, each=50)
color.vector
plot(x=iris$Petal.Length, y=iris$Sepal.Length, pch=19, col=color.vector,
main="Plot of Iris colored by species")
graphics.off()
plot.colors <- c("violet", "purple", "blue")   # define the colors for representing species ID
color.vector <- rep(x=plot.colors, each=50)
color.vector
plot(x=iris$Petal.Length, y=iris$Sepal.Length, pch=19, col=color.vector,
main="Plot of Iris colored by species")
names(plot.colors) <- levels(iris$Species)   # the "levels()" function returns all unique labels for any "factor" variable
plot.colors
indices <- match(iris$Species,names(plot.colors))   # the "match()" function returns the indices of the second vector corresponding to each element of the first vector
color.vector2 <- plot.colors[indices]
plot(x=iris$Petal.Length, y=iris$Sepal.Length, pch=19, col=color.vector2,
main="Iris sepal length vs. petal length", xlab="Petal length",
ylab="Sepal length", las=1)
layout(matrix(1:3, nrow=1, ncol=3))
# Plot
plot(x=iris$Petal.Length, y=iris$Sepal.Length, pch=19, col=color.vector,
main="Iris sepal length vs. petal length", xlab="Petal length",
ylab="Sepal length", las=1)
# Plot
plot(x=iris$Petal.Length, y=iris$Sepal.Length, pch=19, col=color.vector,
main="Iris sepal length vs. petal length", xlab="Petal length",
ylab="Sepal length", las=1)
# First legend
legend("topleft", pch=19, col=plot.colors, legend=unique(iris$Species))
# Second plot
plot(x=iris$Petal.Length, y=iris$Sepal.Length, pch=19, col=color.vector,
main="Iris sepal length vs. petal length",
xlab="Petal length", ylab="Sepal length", las=1)
# Second legend
# The bty="n" argument suppresses the border around the legend. (A personal preference)
legend("topleft", pch=19, col=plot.colors,
legend=c("I. setosa", "I. versicolor", "I. virginica"), bty="n")
# Plot Three
plot(x=iris$Petal.Length, y=iris$Sepal.Length, pch=19, col=color.vector,
main="Iris sepal length vs. petal length",
xlab="Petal length", ylab="Sepal length", las=1)
#Legend tree with Italics
legend("topleft", pch=19, col=plot.colors,
legend=c("I. setosa", "I. versicolor", "I. virginica"),
bty="n", text.font=3)
?mtcars
head(mtcars)
plot(mpg~wt,  data=mtcars,pch=20,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)")      # note the tilde, which can be read "as a function of" -- i.e., "mpg as a function of wt"
## Plot fuel economy by weight
graphics.off()
plot(mpg~wt,  data=mtcars,pch=20,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)")      # note the tilde, which can be read "as a function of" -- i.e., "mpg as a function of wt"
hp_rescale <- with(mtcars,(hp-min(hp))/diff(range(hp)))    # scale from 0 to 1
plot(mpg~wt,  data=mtcars,pch=1,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",cex=(hp_rescale+0.6)*1.2)   # plot with different sized points
legend("topright",pch=c(1,1),pt.cex=c(0.6,0.6*1.2),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
colramp <- terrain.colors(125)
colindex <- round(hp_rescale*99+1)
plot(mpg~wt,  data=mtcars,pch=20,cex=2,xlab="Vehicle weight (1000 lbs)",ylab="Fuel economy (mpg)",col=colramp[colindex])   # plot with different sized points
legend("topright",pch=c(20,20),pt.cex=c(2,2),col=c(colramp[1],colramp[100]),legend=paste(range(mtcars$hp),"horsepower"),bty="n")
## calculate the mean Sepal Length of for each species
bar.heights <- tapply(X=iris$Sepal.Length, INDEX=iris$Species, FUN=mean)   #use "tapply()" function, which summarizes a numeric variable by levels of a categorical variable)
# The basic 'barplot()' function
barplot(bar.heights)
# Let's add some flair
barplot(bar.heights, names.arg=c("I. setosa", "I. versicolor", "I. virginica"),
las=1, col=adjustcolor(plot.colors, alpha.f=0.5),
main="Sepal length for 3 Irises", ylab="Sepal length (cm)")
CI <- 2 * by(iris$Sepal.Length, iris$Species, sd)
lwr <- bar.heights - CI
upr <- bar.heights + CI
b <- barplot(bar.heights,
names.arg=c("I. setosa", "I. versicolor", "I. virginica"),
las=1, ylim=c(0,8), col=adjustcolor(plot.colors, alpha.f=0.5),
main="Sepal length for 3 Irises", ylab="Sepal length (cm)")
# Specify where each arrow starts (x0= and y0=) and ends (x1= and y1=)
arrows(x0=b, x1=b, y0=lwr, y1=upr, code=3, angle=90, length=0.1)
layout(matrix(1:2, 1, 2))
## y-axis is in counts by default (total observations in each "bin")
hist(iris$Sepal.Length, main="Histogram of Sepal Length",
xlab = "Sepal Length")
## change y-axis to proportions of the entire dataset using freq=FALSE
hist(iris$Sepal.Length, freq=FALSE, main="Histogram of Sepal Length",
xlab = "Sepal Length")
lines(density(iris$Sepal.Length))   # add a line to the histogram to approximate the probability density of the data distribution
pairs(iris)
?ToothGrowth
head(ToothGrowth)
plot.colors <- c("red","blue")
names(plot.colors) <-levels(ToothGrowth$dose)
plot.colors
indices <- match(ToothGrowth$dose,names(plot.colors))
color.vector2 <- plot.colors[indices]
plot(x=ToothGrowth$dose, y=ToothGrowth$supp, pch=19, col=color.vector2,
main="Tooth Growth vs. Vitamon C Dose", xlab= "Vitamin C Dose (mg)",
ylab= "Tooth Growth (mm)")
indices
plot.colors <- c("red","blue")
names(plot.colors) <-levels(ToothGrowth$dose)
plot.colors
names(plot.colors) <-levels(ToothGrowth$supp)
plot.colors
indices <- match(ToothGrowth$dose,names(plot.colors))
color.vector2 <- plot.colors[indices]
plot(x=ToothGrowth$dose, y=ToothGrowth$supp, pch=19, col=color.vector2,
main="Tooth Growth vs. Vitamin C Dose", xlab= "Vitamin C Dose (mg)",
ylab= "Tooth Growth (mm)")
indices <- match(ToothGrowth$supp,names(plot.colors))
color.vector2 <- plot.colors[indices]
plot(x=ToothGrowth$dose, y=ToothGrowth$len, pch=19, col=color.vector2,
main="Tooth Growth vs. Vitamin C Dose", xlab= "Vitamin C Dose (mg)",
ylab= "Tooth Growth (mm)")
legend("topleft", pch=19, col=plot.colors,
legend=c("VC", "OJ"), bty="n")
legend=c("VC", "OJ")
graphics.off()
plot(x=ToothGrowth$dose, y=ToothGrowth$len, pch=19, col=color.vector2,
main="Tooth Growth vs. Vitamin C Dose", xlab= "Vitamin C Dose (mg)",
ylab= "Tooth Growth (mm)")
legend("topleft", pch=19, col=plot.colors,
legend=c("VC", "OJ")
legend("topleft", pch=19, col=plot.colors,
legend=c("VC", "OJ")
legend ("topleft", pch=19, col=plot.colors, legend=c("VC", "OJ")
legend ("topleft", pch=19, col=plot.colors, legend=c("VC", "OJ"))
legend ("topleft", pch=19, col=plot.colors, legend=c("VC", "OJ"),)
prop <- c(0.18, 0.25, 0.13, 0.05)
asympLCL <- c(0.14, 0.20, 0.11, 0.035)
asympUCL <- c(0.24, 0.33, 0.18, 0.09)
summary(prop)
legend ("topleft", pch=19, col=plot.colors, legend=c("VC", "OJ"),las=1)
legend ("topleft", pch=19, col=plot.colors, legend=c("VC", "OJ"),las=1)
legend ("topleft", pch=19, col=plot.colors, legend=unique(ToothGrowth$supp),las=1)
plot(x=ToothGrowth$dose, y=ToothGrowth$len, pch=19, col=color.vector2,
main="Tooth Growth vs. Vitamin C Dose", xlab= "Vitamin C Dose (mg)",
ylab= "Tooth Growth (mm)")
legend ("topleft", pch=19, col=plot.colors, legend=unique(ToothGrowth$supp),las=1)
legend ("topleft", pch=19, col=plot.colors, legend=unique(ToothGrowth$supp),)
sculpin.df <- read.csv("sculpineggs.csv")
head(sculpin.df)
mean(sculpin.df$NUMEGGS)      # compute sample mean
median(sculpin.df$NUMEGGS)    # compute sample median
min(sculpin.df$NUMEGGS)       # sample minimum
max(sculpin.df$NUMEGGS)       # sample maximum
range(sculpin.df$NUMEGGS)     # both min and max.
quantile(sculpin.df$NUMEGGS,c(0.25,0.75))   # compute sample quartiles
